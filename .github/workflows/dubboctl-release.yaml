#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: dubboctl Release

on:
  push:
    tags:
      - "dubboctl-*"

permissions:
  contents: write

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "dubboctl-${{ github.ref_name }}"
          body: |
            ## Automated Release - ${{ github.ref_name }}
            This release contains pre-built binaries for multiple platforms/architectures.
          draft: false
          prerelease: false

  build_and_upload:
    name: Build & Upload Binaries
    needs: create_release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [386, amd64, arm64]
        exclude:
          - goos: darwin
            goarch: 386

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download Dependencies
        run: |
          go mod download

      - name: Build dubboctl Binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          # If your Makefile embeds the version, pass it here
          GIT_VERSION: ${{ github.ref_name }}
        run: |
          mkdir -p build/
          # Assume your Makefile has a target “build-dubboctl” that respects GOOS/GOARCH/GIT_VERSION
          make build-dubboctl GOOS=${GOOS} GOARCH=${GOARCH} GIT_VERSION=${GIT_VERSION}
          # Copy README and LICENSE into the “build” folder
          cp README.md LICENSE build/
          # Move the compiled binary (e.g. bin/dubboctl_…) into “build”
          mv bin/dubboctl* build/

      - name: Package into Archive
        id: package
        run: |
          # Strip “refs/tags/” prefix to get the pure tag, e.g. “dubboctl-v1.0.0”
          VERSION=${GITHUB_REF#refs/tags/}
          FILENAME=dubboctl-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}
          # Use .zip on Windows, .tar.gz elsewhere
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -j "${FILENAME}.zip" build/*
            echo "name=${FILENAME}.zip" >> "$GITHUB_OUTPUT"
          else
            tar -czvf "${FILENAME}.tar.gz" -C build .
            echo "name=${FILENAME}.tar.gz" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/${{ steps.package.outputs.name }}
          asset_name: ${{ steps.package.outputs.name }}
          asset_content_type: application/octet-stream

