#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: dubboctl Release

on:
  push:
    tags:
      - 'dubboctl-**'
  release:
    types: [created]

jobs:
  release:
    name: Release dubboctl
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [386, amd64, arm64]
        exclude:
          - goos: darwin
            goarch: 386
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GIT_VERSION: ${{ github.ref_name }}
        run: |
          mkdir -p build/
          make build-dubboctl GOOS=${GOOS} GOARCH=${GOARCH} GIT_VERSION=${GIT_VERSION}
          cp README.md LICENSE build/
          mv bin/dubboctl* build/

      - name: Create package
        id: package
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          FILENAME=dubboctl-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -j ${FILENAME}.zip build/*
            echo "name=${FILENAME}.zip" >> $GITHUB_OUTPUT
          else
            tar -czvf ${FILENAME}.tar.gz -C build .
            echo "name=${FILENAME}.tar.gz" >> $GITHUB_OUTPUT
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.package.outputs.name }}
          asset_name: ${{ steps.package.outputs.name }}
          asset_content_type: application/octet-stream
